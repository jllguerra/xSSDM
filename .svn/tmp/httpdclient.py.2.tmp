'''
Created on Nov 4, 2020

@author: manchf
'''
import urllib.request
import ssl
from requests.exceptions import HTTPError
from Config.config import *

class httpdclient(object):
    '''
    classdocs
    '''


    def __init__(self, username, clave):
      self.server=SSDM_SERVER
      self.username=username
      self.clave=clave
      self.conectado=False
      self.url=SSDM_SERVER_URL
      self.error=""
      self.urlib=""
        
    # LLamar directamente solo en modo debug
    def conectar(self):    
      context = ssl._create_unverified_context()
#    context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
#    context.verify_mode = ssl.CERT_REQUIRED
#    context.load_verify_locations(certifi.where())
      httpsHandler = urllib.request.HTTPSHandler(context = context)
    
    # create a password manager
    #self.password_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()
      manager = urllib.request.HTTPPasswordMgrWithDefaultRealm()
      manager.add_password(None,self.server , self.username, self.clave)
      authHandler = urllib.request.HTTPBasicAuthHandler(manager)
      opener = urllib.request.build_opener(httpsHandler, authHandler)
      urllib.request.install_opener(opener)
      #login = urllib.request.Request(self.qloginurl)
      login = urllib.request.Request(self.url)
      try:
        postdata={"accion":"conectar"}
        urllib.parse.urlencode(postdata).encode('utf-8')
        logindata=urllib.request.urlopen(login)
        self.conectado=True
        print (logindata.read())
        if logindata.msg == "OK":
            self.conectado=True
        else:
            self.error = "Error de Autenticacion: " + print(logindata.read())
      except urllib.error.HTTPError as Exception:
        print(Exception)
        
    def execAPIfunction(self,accion,params):
<<<<<<< .mine
      result=""
      if not self.conectado:
        context = ssl._create_unverified_context()
        httpsHandler = urllib.request.HTTPSHandler(context = context)
        manager = urllib.request.HTTPPasswordMgrWithDefaultRealm()
        manager.add_password(None,self.server , self.username, self.clave)
        authHandler = urllib.request.HTTPBasicAuthHandler(manager)
        opener = urllib.request.build_opener(httpsHandler, authHandler)
        urllib.request.install_opener(opener)
        try:
          login = urllib.request.Request(self.url)
          self.conectado=True
        except urllib.error.HTTPError as Exception:
          print(Exception)
          result="<resultado>ERROR</resultado>"
          self.conectado=False
      if self.conectado:
        try:
          postdata={"accion":accion}
          postdataencode=urllib.parse.urlencode(postdata).encode('utf-8')
          urlpostmethod = urllib.request.Request(self.url,postdataencode )
          urlreturn=urllib.request.urlopen(urlpostmethod)
          print(urlreturn.read().decode('utf-8'))
        except urllib.error.HTTPError as Exception:
          print(Exception)
          return "<resultado>ERROR</resultado>"
||||||| .r701
=======
      context = ssl._create_unverified_context()
      httpsHandler = urllib.request.HTTPSHandler(context = context)
      manager = urllib.request.HTTPPasswordMgrWithDefaultRealm()
      manager.add_password(None,self.server , self.username, self.clave)
      authHandler = urllib.request.HTTPBasicAuthHandler(manager)
      opener = urllib.request.build_opener(httpsHandler, authHandler)
      urllib.request.install_opener(opener)
      login = urllib.request.Request(self.url)
      try:
        postdata={"accion":accion}
        postdataencode=urllib.parse.urlencode(postdata).encode('utf-8')
        urlpostmethod = urllib.request.Request(self.url,postdataencode )
        urlreturn=urllib.request.urlopen(urlpostmethod)
        print(urlreturn.read().decode('utf-8'))
        self.conectado=True
      except urllib.error.HTTPError as Exception:
        print(Exception)
        return "<resultado>ERROR</resultado>"
>>>>>>> .r703
   
