import gi
from Soft.Simulacion import Simulacion
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from Soft.Server import Server
from Soft.DB import DB
from Soft.User import User
from FileTransfer.SimFiles import SimFiles
from Config.config import *
import getpass
import os
from pathlib import Path
import inspect
import logging
import sys, getopt

class xSDM(Gtk.Application):
    
    def show_error(self,parent, msg, title):
        errorIMG = self.MainGlade.get_object("ErrorIMG")
        if self.messageWin.get_image() == None:
            self.messageWin.set_image(errorIMG)
        labels=self.messageWin.get_children()[0].get_children()[0].get_children()[1].get_children()
        labels[0].set_text(title)
        labels[1].set_text(msg)
        self.messageWin.run()
        self.messageWin.hide()
        return None

    # Signals para Login Window
    def on_MainCancel_clicked(self, widget, data=None):
        Gtk.main_quit()
        return False
    
    def on_Login_clicked(self, widget, data=None):
        # Autentificacion PKI
        self.error=""
        self.LoginWindow.hide()
        conn = Server.login(self,self.User)

        if conn.conectado:
            self.User.conn=conn
            err=self.cargaDatos()
            if not err: self.start_SSDM()
        else:
            self.show_error(self.LoginWindow,self.User.conn.error,"Error Login")
            self.LoginWindow.show()
            
    def cargaDatos(self):
        if not self.User.conn.error:
            self.DB = DB()
            self.DB.cargaUserProjects(self.User)
            self.DB.cargaTipos()
            self.DB.cargaFases()
            self.DB.cargaDisciplinas()
            self.DB.cargaSubdisciplinas()
            self.DB.cargaLoadCases()
        else: 
            self.show_error(self.LoginWindow,self.conn.error,"Error cargando Datos")
            return 1
        return 0
        
    # Signals para Main Window
    def on_New_clicked(self, widget, data=None):
        self.LoginWindow.hide()
        # Autentificacion PKI
        #self.soft=NewSimulation(self.glade,self.useridOS,self.logger)

    def on_Find_clicked(self, widget, data=None):
        self.LoginWindow.hide()
        # Autentificacion PKI
        #self.soft=NewSimulation(self.glade,self.useridOS,self.logger)

    def onProjectView_row_expand(self,project_view, path, column):
        Simulacion.expandir_Proyecto(self,project_view, path, column)

    # Signals comunes
    def gtk_main_quit(self, widget, data=None):
        Gtk.main_quit()
        return False

    def gtk_widget_show(self, widget, data=None):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        widget.show()
#         self.AboutWindow = self.win.get_object("AboutWindow")
#         self.AboutWindow.show()

    def gtk_widget_hide(self, widget, data=None):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        widget.hide()
        #self.AboutWindow = self.win.get_object("AboutWindow")
        #self.AboutWindow.hide()

#     def gtk_OKFile_clicked(self,widget,data=None):
#         self.selectFileWindow.hide()
#         Sim=Simulacion()
#         Sim.NewSimulation(self,widget,self.selectFileWindow)
        
    def gtk_NewSimulation(self,widget,data=None):
        # Llamada a nueva simulacion con parametros
        # 
        response = self.selectFileWindow.run()
        if not response == Gtk.ResponseType.ACCEPT:
            self.selectFileWindow.hide()
            return
        file = self.selectFileWindow.get_file()
        Sim=Simulacion(self)
#        Sim.NewSimulation(self,file)
        Sim.Filename=file.get_path()
        SimFile=SimFiles(self,"","","")
        file = SimFile.openfile(self,Sim.Filename,'r')
        readed = Sim.readCabecera(file)
        self.selectFileWindow.destroy()
        if not readed:
            self.showCabecera(Sim)
        else:
            self.show_error("Error en la cabecera")

    def showCabecera(self,Sim):
        filename = self.SimGlade.get_object("filename") 
        filename.set_text(Sim.Filename)
        for project_ref in self.User.Projects:
            self.listaProyectos.append_text(project_ref)
        self.listaProyectos.insert_text(0,Sim.Proyecto)
        self.listaProyectos.set_active(0)
        for tipo_ref in self.DB.Tipos:
            self.listaTipos.append_text(tipo_ref)
        self.listaTipos.insert_text(0,Sim.Tipo)
        self.listaTipos.set_active(0)
        for fase_ref in self.DB.Fases:
            self.listaFases.append_text(fase_ref)
        self.listaFases.insert_text(0,Sim.Fase)
        self.listaFases.set_active(0) 
        for disciplina_ref in self.DB.Disciplinas:
            self.listaDisciplina.append_text(disciplina_ref)
        self.listaDisciplina.insert_text(0,Sim.Disciplina)
        self.listaDisciplina.set_active(0)
        for subdisciplina_ref in self.DB.Subdisciplinas:
            self.listaSubdisciplina.append_text(subdisciplina_ref)
        self.listaSubdisciplina.insert_text(0,Sim.Subdisciplina)
        self.listaSubdisciplina.set_active(0)
        for loadcase_ref in self.DB.LoadCases:
            self.listaLoadCase.append_text(loadcase_ref)
        self.listaLoadCase.insert_text(0,Sim.LoadCase)
        self.listaLoadCase.set_active(0)
        self.NewSimWindow.show()
                    
    def gtk_importSimulation(self,widget):
        print ("import simulation")

    def start_SSDM(self):
        # set username
        username = self.MainGlade.get_object("userid") 
        username.set_text("Welcome: " + self.User.username)
        self.main_window = self.MainGlade.get_object( "SSDM" )

        # Add logfile
        self.log_buffer = self.MainGlade.get_object( "Log" )
        with open(self.logFilename, 'r') as f:
                data = f.read()
                self.log_buffer.set_text(data)  
                     
#         v = vte.Terminal()
#         self.term = Terminal()
#         v.fork_command('bash')
#         v.feed_child('ssh %s tail -f %s.o%s \n' % (host,jname,id))
#         v.show()
#         notebook.append_page(v, tab_label=gtk.Label(nodeid)) 
               
        # set user Projects
        # list of tuples for each software, containing the software name, initial release, and main programming languages used
        project_list = [
            ("Prj1","Prj1 Desc"),
            ("Prj2","Prj2 Desc"),
            ("Prj3","Prj3 Desc"),
        ]
         
        self.project_tree = self.MainGlade.get_object("Arbol")
         
        # Adding info in the TreeStore model
        self.project_store = self.MainGlade.get_object("Projects")
        for project_ref in project_list:
            cur_project=self.project_store.append(None,list(project_ref))
        self.current_filter_language = None  
         
        # Generamos columnas en Tree View
        self.column1 = Gtk.TreeViewColumn("Project")
        self.project_tree.append_column(self.column1)
        self.column2 = Gtk.TreeViewColumn("Description")
        self.project_tree.append_column(self.column2)
#         self.column3 = Gtk.TreeViewColumn("Description")
#         self.project_tree.append_column(self.column3)
        #column.set_sort_column_id(0)
         
        self.cell1 = Gtk.CellRendererText()
        self.column1.pack_start(self.cell1, True)
        self.column1.add_attribute(self.cell1, 'text', 0)
        self.cell2 = Gtk.CellRendererText()
        self.column2.pack_start(self.cell2, True)
        self.column2.add_attribute(self.cell2, 'text', 1)
#         self.cell3 = Gtk.CellRendererText()
#         self.column3.pack_start(self.cell3, True)
#         self.column3.add_attribute(self.cell3, 'text', 2)
         
        self.project_tree.set_search_column(0)
        self.column1.set_sort_column_id(0)
#         self.column2.set_sort_column_id(1)
#         self.column3.set_sort_column_id(2)
 
        self.project_tree.connect("row-activated", self.onProjectView_row_expand)
 
 
        self.Paned = self.MainGlade.get_object("Paned")
        self.Paned.set_position(250)
        self.Principal = self.MainGlade.get_object("Principal")
        self.Principal.set_position(250)

        self.main_window.show()
                
   # Inicializacion
    def __init__(self):
        self.scriptDir = os.path.dirname(os.path.realpath(__file__))
        self.tmpDir = self.scriptDir + "/../tmp/"
        self.gladeDir = self.scriptDir + "/../etc/"
        self.User = User(getpass.getuser())
        self.logFilename = self.tmpDir + Path(os.path.realpath(__file__)).stem + ".log"
        self.MainGlade = Gtk.Builder()
        self.SimGlade = Gtk.Builder()
        self.logger = logging.getLogger('myapp')
        self.logger.setLevel(logging.INFO)
        
        # Anadimos ficheros Glade
        self.MainGlade.add_from_file(self.gladeDir + "xSDM.glade")
        self.SimGlade.add_from_file(self.gladeDir + "InputSim.glade")
        
        # Definimos ventanas
        self.LoginWindow = self.MainGlade.get_object("LoginWindow")
        self.messageWin = self.MainGlade.get_object("Message")
        self.selectFileWindow=self.SimGlade.get_object("selectFileWin")
        self.NewSimWindow = self.SimGlade.get_object("NewSimWin")
        
        # ComboBoxText Simulacion nueva
        self.listaProyectos = self.SimGlade.get_object("proyecto")
        self.listaTipos = self.SimGlade.get_object("tipo")
        self.listaFases = self.SimGlade.get_object("fase")
        self.listaDisciplina = self.SimGlade.get_object("disciplina")
        self.listaSubdisciplina = self.SimGlade.get_object("subdisciplina")
        self.listaLoadCase = self.SimGlade.get_object("loadcase")
        


        
        # Conectamos signals
        self.MainGlade.connect_signals(self)
        self.SimGlade.connect_signals(self)
        self.LoginWindow.set_title("SEAT SDM Login")
        #self.LoginWindow.set_default_size(200, 400)
        #self.msg = "Inicio aplicacion"
        #self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        #Gtk.Application.__init__(self)


    # Programa principal
    def main(self,argv):
        # Arguments
        try:
            #opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])
            opts, args = getopt.getopt(argv,"hd")
        except getopt.GetoptError:
            print ("xSDM.py -d")
            sys.exit(2)
        for opt, arg in opts:
            if opt == '-h':
                print ("xSDM.py -d")
                sys.exit()
            #elif opt in ("-l", "--log"):
            elif opt in ("-d"):
                self.logger.setLevel(logging.DEBUG)
        
        # Log file        
        if not os.path.exists(self.tmpDir): 
            #self.msg = "El directorio %s ya existe" % self.tmpDir
            #self.logger.debug ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        #else:
            try:
                os.mkdir(self.tmpDir)
            except OSError:
                print ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
                sys.exit(2)
            #else:
                #self.msg = "Se ha creado el directorio: %s " % self.tmpDir
                #self.logger.debug ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
                
        # Inicio        
        hdlr = logging.FileHandler(self.logFilename)
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        hdlr.setFormatter(formatter)
        self.logger.addHandler(hdlr) 
        
        self.msg = "Inicio aplicacion"
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        self.LoginWindow.show()
        Gtk.main()

# Inicio Aplicacion  
if __name__=='__main__':
    app = xSDM()
    app.main(sys.argv[1:])
    
