'''
Created on 

@author: vwgs
'''
import os,sys
#from DBserver.usuarios import usuarios
#from shutil import copy2

#from Soft.Nastran import Nastran
# from numpy import void
# from pasta.base.codegen import to_str
#from DBserver.jobs import jobs

class SimFiles:
    
    def __init__( self,parent,username,softname,dbjob):
        self.username=username;
        self.softname=softname;
        self.parent=parent;
        #dbusuarios=usuarios();
        self.dbjob=dbjob;

    def isInDirectory(self,filename,dirname):
        pa = os.path.split(os.path.dirname(filename))
        if pa[1]==dirname:
            return True
        return False
    
    def getRootDirectory(self,filename):
        rootDir = os.path.split(os.path.dirname(filename))
        return rootDir[0]

    def existStructure(self,source,structDir):
        for dir in structDir:
            if not os.path.exists(source + "/" + dir):
                return False
        return True
        
    def copyDir(self,orig,dest):
        error="OK"
        error=self.creaDir(dest)
        if error == "OK":
            #print ("cp -r " + orig + '/* ' + dest)
            try:
                #descomentar en mas pruebas
                os.system("cp -r " + orig + '/* ' + dest)
                return "OK"
            except:
                error=sys.exc_info()[1].strerror
                return "Fallo al copiar simulacion en el Storage" + error
        else:
            return "Fallo al crear directorio en Storage: " + error

    def delDir(self,dir):
        error="OK"
        try:
            #descomentar en mas pruebas
            os.system("rm -rf " + dir)
            return "    OK: Borrada simulacion de STODIR"
        except:
            error=sys.exc_info()[1].strerror
            return "    Fallo al borrar simulacion del Storage" + error

        
    def creaDir(self,dir):
#     
#     idjob=self.dbjob.getidjob();
#     
#     storageWS=self.storageWS+"/"+self.username+"."+str(idjob)+"."+os.path.basename(mainfile)[:-4];
#     
        try:
            os.mkdir(dir,0o755);
            error="OK"
        except:
                error=sys.exc_info()[1].strerror
                ##self.parent.show_error("Fallo al crear el directorio" + format(error));
#       
#     if not os.path.exists(storageWS) or not os.access(storageWS,os.W_OK) is True:
#       storageWS=None;

        return error
     
    @staticmethod
    def openfile(parent,filename,mode):
        fileh=None;
        try:
            fileh=open(filename,mode);
        except:
            parent.show_error("No se puede abrir el fichero"+filename);
            fileh.close();
    
        return fileh;

  @staticmethod
  def readfilelines(parent,file,maxlineas):
    contenido=None;
    fileh=SimFiles.openfile(parent,file,"r")
    try:
      contenido=fileh.readlines(maxlineas);
    except:
      parent.show_error("No se puede leer el fichero");
    finally:
      fileh.close();
       
    return contenido;
  
#   def creainputdir(self,mainfile,dbjob):
#     self.dbjob=dbjob;
#     ret='';
#     if mainfile == None:
#       self.parent.show_error("Falta el fichero de Entrada");
#     else: 
#       if self.softname.lower()=="nastran":
#         ret=self.creainputdirNastran(mainfile);
#       
#     return ret
#     
# #    Nastran::
#   def creainputdirNastran(self,mainfile):
#     
#     ret='';
#     
#     destino=self.creaStoDir(mainfile)
#     
#     if destino and destino != None:
#       if self.copyNastranFileSTO(mainfile,destino):
#         ret=destino+"/"+os.path.basename(mainfile);
#     else:
#       self.parent.show_error("Sin acceso al directorio de STO");
#     
#     return ret
#   
#    
#   def copyNastranFileSTO(self,fileI,fileO):
#     ret=True;
#     segundalinea=False;
#     newfilename='';
#     dirnamebaseI=os.path.dirname(fileI);
#     
#     if os.path.isdir(fileI):
#       self.parent.show_error("Error: Hay un INCLUDE solo con el nombre del directorio.");
#       ret=False;
#     else:
#       if os.access(fileI,os.R_OK) is True:
#         if os.path.splitext(fileI)[1] == ".dat" or os.path.splitext(fileI)[1] == ".bdf":
#           self.parent.show_out("Copiando"+fileI+"a Storage");
#           contenidoIN=SimFiles.readfilelines(self.parent,fileI,-1);
#           contenidoOUT='';
#           for linea in contenidoIN:
#             if ret:
#               if segundalinea:
#                 contenidoOUT+=linea;
#                 segundalinea=False;
#                 firstc=linea.find("'");
#                 newfilename+=linea[:firstc];
#                 print(dirnamebaseI+"/"+newfilename);
#                 ret=self.copyNastranFileSTO(dirnamebaseI+"/"+newfilename,fileO);
#                 print(dirnamebaseI+"/"+newfilename);
#               else:
#                 esInclude='include' in linea.lower();
#                 esAssign='assign' in linea.lower();
#                 esComment=linea.find('$')==0;
#             
#                 if (esInclude or esAssign) and not esComment:
#                   firstc=linea.find("'");
#                   lastc=linea.rfind("'");
#               
#                   if lastc > firstc:
#                     newfilename=linea[firstc+1:lastc];
#                     newfilename=os.path.basename(newfilename.strip());
#                     ret=self.copyNastranFileSTO(dirnamebaseI+"/"+newfilename,fileO);
#                     newfilename+="'"
#                   else:
#                     if lastc==firstc:
#                       newfilename=linea[firstc+1:];
#                       newfilename=os.path.basename(newfilename.strip());
#                       segundalinea=True;                  
#                 
#                   contenidoOUT+=linea[:firstc+1]+newfilename+'\n'                
#                 else:
#                   contenidoOUT+=linea;  
#           try:
#             fileHD=SimFiles.openfile(self.parent,fileO+"/"+os.path.basename(fileI),"w");
#             fileHD.write(contenidoOUT);
#           except:
#             ret=False;
#             self.parent.show_error("Fallo en la copia a STO");
#           finally:
#             fileHD.close();
#         else:
#           self.parent.show_out("Copiando"+fileI+"a Storage");
#           try:
#             copy2(fileI,fileO);
#           except:
#             ret=False;
#             self.parent.show_error("Fallo en la copia a STO de " + fileI);
#             
#       else:
#         ret=False;
#         self.parent.show_error("Error: File " + fileI + " no se puede leer.");
#             
#     return ret    