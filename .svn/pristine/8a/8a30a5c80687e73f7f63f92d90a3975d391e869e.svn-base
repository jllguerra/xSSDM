import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from Soft.Login import Login
from Soft.Calculos import Calculos
import getpass
import os
from pathlib import Path
import inspect
import logging
import sys, getopt

class xSDM(Gtk.Application):
    
    def show_error(self,error):
        self.messageWin = self.win.get_object("Message")
        self.messageWin.show()

    # Signals para Login Window
    def on_MainCancel_clicked(self, widget, data=None):
        Gtk.main_quit()
        return False
    
    def on_Login_clicked(self, widget, data=None):
        # Autentificacion PKI
        #self.LoginWindow.hide()
        self.error=""
        self.LoginWindow.hide()
        User=Login()
        User.login(self.useridOS,self.logger)
        if User.error == "":
            Calculos.start_SSDM(self)
        else:
            self.show_error("Bad authetication, try again")
            self.LoginWindow.show()
            

    # Signals para Main Window
    def on_New_clicked(self, widget, data=None):
        self.LoginWindow.hide()
        # Autentificacion PKI
        #self.soft=NewSimulation(self.glade,self.useridOS,self.logger)

    def on_Find_clicked(self, widget, data=None):
        self.LoginWindow.hide()
        # Autentificacion PKI
        #self.soft=NewSimulation(self.glade,self.useridOS,self.logger)

    def onProjectView_row_expand(self,project_view, path, column):
        Calculos.expandir_Proyecto(self,project_view, path, column)

    # Signals comunes
    def gtk_main_quit(self, widget, data=None):
        Gtk.main_quit()
        return False

    def gtk_widget_show(self, widget, data=None):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        widget.show()
#         self.AboutWindow = self.win.get_object("AboutWindow")
#         self.AboutWindow.show()

    def gtk_widget_hide(self, widget, data=None):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        widget.hide()
        #self.AboutWindow = self.win.get_object("AboutWindow")
        #self.AboutWindow.hide()

    def gtk_OKFile_clicked(self,widget,data=None):
        self.FileWindow = self.win.get_object("SelectFile")
        self.FileWindow.hide()
        Calculos.NewSimulation(self,widget,self.FileWindow)
        
    def gtk_new_simulation(self,widget,data=None):
        # Llamada a nueva simulacion con parametros
        # 
        widget.hide()

   # Inicializacion
    def __init__(self):
        self.scriptDir = os.path.dirname(os.path.realpath(__file__))
        self.tmpDir = self.scriptDir + "/../tmp/"
        self.gladeDir = self.scriptDir + "/../etc/"
        self.useridOS = getpass.getuser()
        self.logFilename = self.tmpDir + Path(os.path.realpath(__file__)).stem + ".log"
        self.win = Gtk.Builder()
        self.logger = logging.getLogger('myapp')
        self.logger.setLevel(logging.INFO)
        #self.msg = "Inicio aplicacion"
        #self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        #Gtk.Application.__init__(self)

    # Programa principal
    def main(self,argv):
        # Arguments
        try:
            #opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])
            opts, args = getopt.getopt(argv,"hd")
        except getopt.GetoptError:
            print ("xSDM.py -d")
            sys.exit(2)
        for opt, arg in opts:
            if opt == '-h':
                print ("xSDM.py -d")
                sys.exit()
            #elif opt in ("-l", "--log"):
            elif opt in ("-d"):
                self.logger.setLevel(logging.DEBUG)
        
        # Log file        
        if not os.path.exists(self.tmpDir): 
            #self.msg = "El directorio %s ya existe" % self.tmpDir
            #self.logger.debug ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        #else:
            try:
                os.mkdir(self.tmpDir)
            except OSError:
                print ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
                sys.exit(2)
            #else:
                #self.msg = "Se ha creado el directorio: %s " % self.tmpDir
                #self.logger.debug ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
                
        # Inicio        
        hdlr = logging.FileHandler(self.logFilename)
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        hdlr.setFormatter(formatter)
        self.logger.addHandler(hdlr) 
        
        self.msg = "Inicio aplicacion"
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        self.win.add_from_file(self.gladeDir + "xSDM.glade")
        self.LoginWindow = self.win.get_object("LoginWindow")
        self.win.connect_signals(self)
        self.LoginWindow.set_title("SEAT SDM Login")
        #self.LoginWindow.set_default_size(200, 400)
        self.LoginWindow.show()
        Gtk.main()

# Inicio Aplicacion  
if __name__=='__main__':
    app = xSDM()
    app.main(sys.argv[1:])
    
