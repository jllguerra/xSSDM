import gi
from Soft.Simulacion import Simulacion
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, GLib, Gdk
from gi.repository.GdkPixbuf import Pixbuf
from Soft.DB import DB
from Soft.User import User
from FileTransfer.SimFiles import SimFiles
from Soft.PKI import PKI
import Config.config as Globals
import getpass
import os, stat
from pathlib import Path
import inspect
import logging
import sys, getopt
import json


class xSSDM(Gtk.Application):
    
    def show_message(self,parent, image, msg,title):
        self.messageWin.set_title(title)
        self.messageLabel.set_markup("<span foreground='black'><b> " + msg + " </b></span>")
        
        #self.messageIMG.new_from_icon_name(image,Gtk.IconSize.DIALOG) # icon name: GTK_STOCK_OPEN, GTK_STOCK_QUIT. Sample stock sizesare GTK_ICON_SIZE_MENU, GTK_ICON_SIZE_SMALL_TOOLBAR
        self.messageIMG.set_from_icon_name(image,Gtk.IconSize.DIALOG);
        #self.messageWin.set_transient_for(self.LoginWindow)
        self.messageWin.show()

    # Signals para Login Window
    def on_MainCancel_clicked (self, widget, data=None):
        Gtk.main_quit()
        return False
    
    def on_LoginButton_clicked (self, widget, data=None):
        # Autentificacion PKI
        self.error=""
        self.LoginWindow.hide()
        
        # Login con Webseal. Solo comprobamos targeta insertada
        pki=PKI("")
        if pki.error: 
            self.show_message(self.LoginWindow,"dialog-error", pki.msg,"Error Login")
            self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],pki.msg))
            self.LoginWindow.show()
            return

        # Conexion con DB
        self.DB = DB(self.User)

        if self.DB.Conn.conectado == True:  
            err=self.cargaDatos()
            if not err: self.start_SSDM()
            else: self.LoginWindow.show()
        else:
            self.show_message(self.LoginWindow,"dialog-error", self.DB.Conn.error,"Error Login")
            self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],pki.msg))
            self.LoginWindow.show()
    
    # Check ver solo Simulaciones propias
    def on_OwnSimsClicked(self,data=None):
        if data.get_active():
            self.seeOwnSims='True'
            self.project_store.clear()
            self.userProjectsCombo.set_active(0);
        else: 
            self.seeOwnSims='False'
            self.project_store.clear()
            self.userProjectsCombo.set_active(0);
                
    def cargaDatos(self):
        if self.DB.cargaDatos(self.User, 'getUserProfile','user'): 
            self.show_message(self.LoginWindow,"dialog-error","Error Profile","Error loading Data Profile")
            return 1
        else:
            self.User.cargaProjects()
#             if self.DB.cargaDatos(self.User, 'getUserProjects','proyecto'): 
#                 self.show_message(self.LoginWindow,"dialog-error","Error Proyectos","Error cargando Datos")
#                 return 1
        if self.DB.cargaDatos(self.User, 'getProjectStructure','discipline'):
            self.show_message(self.LoginWindow,"dialog-error","Error Structura","Error cargando Datos")
            return 1
        if self.DB.cargaDatos(self.User, 'getDisciplinas','discipline'):
            self.show_message(self.LoginWindow,"dialog-error","Error Disciplinas","Error cargando Datos")
            return 1
        if self.DB.cargaDatos(self.User, 'getEstados','estado'):
            self.show_message(self.LoginWindow,"dialog-error","Error Estados","Error cargando Datos")
            return 1
        if self.DB.cargaDatos(self.User, 'getTipos','tipo'):
            self.show_message(self.LoginWindow,"dialog-error","Error Tipos","Error cargando Datos")
            return 1
        if self.DB.cargaDatos(self.User, 'getStorageWS','storagews'):
            self.show_message(self.LoginWindow,"dialog-error","Error Storage","Error cargando Datos")
            return 1
        if self.DB.cargaDatos(self.User, 'getRights','right'):
            self.show_message(self.LoginWindow,"dialog-error","Error Rights","Error cargando Datos")
            return 1
        if self.DB.cargaDatos(self.User, 'getRoles','role'):
            self.show_message(self.LoginWindow,"dialog-error","Error Rights","Error cargando Datos")
            return 1
        if self.DB.cargaDatos(self.User, 'getAccessLevels','accesslevel'):
            self.show_message(self.LoginWindow,"dialog-error","Error Rights","Error cargando Datos")
            return 1

        return 0
        
    # Signals para Main Window
    def on_New_clicked(self, widget, data=None):
        self.LoginWindow.hide()
        # Autentificacion PKI
        #self.soft=NewSimulation(self.glade,self.useridOS,self.logger)

    def on_Find_clicked(self, widget, data=None):
        self.LoginWindow.hide()
        # Autentificacion PKI
        #self.soft=NewSimulation(self.glade,self.useridOS,self.logger)
    def cargaRama (self, tipoParent, tipoChild, iter, projectID, estadoID, seeOwnSims):
        for node in self.DB.getRama(tipoParent, tipoChild, "", "", ""):
            numsims= self.DB.getNumSims(projectID,node[0],"","",estadoID,seeOwnSims)
            if not numsims=="0": self.project_store.append(iter,[node[0],numsims,tipoChild,""])      
        
    def onProjectSelected(self,project_combo):        
        # Limpiamos carga antigua
        #self.project_store.clear()
        self.selected_project = project_combo.get_active_text()
        
        if not self.selected_project == 'Select Project ...':
            # Limpiamos carga antigua
            self.project_store.clear()
            # Identificamos proyecto
            self.selected_projectID=self.User.getProjectID(self.selected_project)
            tipoParent="root"
            tipoChild=self.User.getTipoChild(tipoParent)
                 
            # Cargamos Rama in the TreeStore model
            self.cargaRama(tipoParent, tipoChild, None, self.selected_projectID,self.selected_estadoID,self.seeOwnSims)
            

    def onEstadoSelected(self,estado_combo):
        self.selected_estado = estado_combo.get_active_text()
        if self.selected_estado == 'Select Status ...':
            self.selected_estadoID=""
        else:
            # Identificamos estado
            self.selected_estadoID=self.DB.getEstadoID(self.selected_estado)

        self.project_store.clear()
        self.userProjectsCombo.set_active(0);


    def onProjectView_row_expand(self,project_view, path, column):
        iter = self.project_store.get_iter(path)
        name = self.project_store.get_value(iter, 0)
        nsimsparent = self.project_store.get_value(iter, 1)
        tipoParent = self.project_store.get_value(iter, 2)
        datos = self.project_store.get_value(iter, 3)
        
        disciplina = ""
        subdisciplina = ""
        loadcase = ""
        tipoChild=self.User.getTipoChild(tipoParent)
        
        # Buscar en Server los datos bajo el Projecto
        if ((not self.project_store.iter_has_child(iter)) and (nsimsparent!="0")):
#             if tipo == 'Project':
#                 # Buscar disciplinas en DB
#                 self.project_store.append(rama,["Disciplina1","Disciplina"])
            if tipoParent == 'Disciplina':
                disciplina=name
                # Buscar SubDisciplina DB
                #self.cargaRama(tipoParent, tipoChild, self.selected_projectID, disciplina, subdisciplina, loadcase, self.selected_estadoID, self.seeOwnSims)
                childs = self.DB.getSubdisciplinas(name)
                for child in childs:
                    numsims= self.DB.getNumSims(self.selected_projectID,disciplina,child,loadcase,self.selected_estadoID,self.seeOwnSims)
                    if not numsims=="0": self.project_store.append(iter,[child,numsims,tipoChild,""])
            if tipoParent == 'Subdisciplina':
                # Buscar LoadCases DB
                ramaDisciplina=self.getParentIter(path)
                disciplina=self.project_store.get_value(ramaDisciplina, 0)
                childs = self.DB.getLoadCases(disciplina, name)
                for child in childs:
                    numsims = self.DB.getNumSims(self.selected_projectID,disciplina,name,child,self.selected_estadoID,self.seeOwnSims)
                    if not numsims=="0": self.project_store.append(iter,[child,numsims,tipoChild,""])
            if tipoParent == 'LoadCase':
                # Buscar Simulacion DB
                iterSubdisciplina=self.getParentIter(path)
                subdisciplina=self.project_store.get_value(iterSubdisciplina, 0)
                iterDisciplina=self.getParentIter(self.project_store.get_path(iterSubdisciplina))
                disciplina=self.project_store.get_value(iterDisciplina, 0)
                loadcase=name
                
                sims=self.DB.getSims(self.selected_projectID,disciplina,subdisciplina,loadcase,self.selected_estadoID,self.seeOwnSims)
                for sim_ref in sims:
                    self.project_store.append(iter,[sims[sim_ref]['name'],"1",tipoChild,json.dumps(sims[sim_ref])])
            if tipoParent == 'Simulacion':
                self.listaSimsStore.clear()  
                self.detailsFrame.set_position(100)      
                self.mostrar_Simulacion(name,datos)
                          
    def getParentIter(self,path):
        indices=path.get_indices()
        parentIndices=[]
        i = 0
        while i <= len(indices)-2:
            parentIndices.append(indices[i])
            i += 1
        parentPath=path.new_from_indices(parentIndices)
        return self.project_store.get_iter(parentPath)

    def simulacion_Mostrada(self,item):
        for row in self.listaSimsStore:
            if row[0] == item[0]: # 00: Simid
                return True
        return False
        
        #view.row_activated(tree_path, column_number)
        #view.set_cursor(tree_path, column_number, True)

    def mostrar_Simulacion(self,simulacion,datos):
        dicti=json.loads(datos)
        listpanelsimulaciones=self.dict2List(dicti)
        if (not self.simulacion_Mostrada(listpanelsimulaciones)):
            self.listaSimsStore.append(listpanelsimulaciones)

    def on_sendButton_clicked(self,button,data=None):
        if len(self.items_seleccionados)>0:
            self.listaSimsStore.clear()     
            self.on_sendPlusButton_clicked(button,data)   
        self.detailsFrame.set_position(400)

            
    def on_sendPlusButton_clicked(self,button,data=None):
        if len(self.items_seleccionados)>0:
            #self.listaSimsStore.clear()    
            for item_seleccionado in self.items_seleccionados:    
                item=item_seleccionado['name']
                nsims=item_seleccionado['nsims']
                tipo=item_seleccionado['tipo']
                datos=item_seleccionado['datos']
                sims={}
                if tipo=="Disciplina": 
                    sims=self.DB.getSims(self.selected_project,item,"","")
                if tipo=="Subdisciplina":
                    ramaDisciplina=self.getParentIter(item_seleccionado['path'])
                    disciplina=self.project_store.get_value(ramaDisciplina, 0)
                    sims=self.DB.getSims(self.selected_project,disciplina,item,"")
                if tipo=="LoadCase":
                    iterSubdisciplina=self.getParentIter(item_seleccionado['path'])
                    subdisciplina=self.project_store.get_value(iterSubdisciplina, 0)
                    iterDisciplina=self.getParentIter(self.project_store.get_path(iterSubdisciplina))
                    disciplina=self.project_store.get_value(iterDisciplina, 0)
                    sims=self.DB.getSims(self.selected_project,disciplina,subdisciplina,item)
                if tipo=="Simulacion":
                    sims[item]=json.loads(datos)
                    
                for sim_ref in sims:
                    datos=json.dumps(sims[sim_ref])
                    self.mostrar_Simulacion(sim_ref,datos)
        self.detailsFrame.set_position(400)

    
    # Show Simulation Details
    def on_treesims_row_activated(self,view,path,column):
        self.id.set_text(self.sim_seleccionada['id'])
        self.name.set_text(self.sim_seleccionada['name'])
        self.project.set_text(self.sim_seleccionada['project'])
        self.disciplina.set_text(self.sim_seleccionada['disciplina'])
        self.subdisciplina.set_text(self.sim_seleccionada['subdisciplina'])
        self.loadcase.set_text(self.sim_seleccionada['loadcase'])
        self.reference.set_text(self.sim_seleccionada['reference'])
        self.variant.set_text(self.sim_seleccionada['variant'])
        self.date.set_text(self.sim_seleccionada['date'])
        self.autor.set_text(self.sim_seleccionada['autor'])
        self.autor.set_text(self.sim_seleccionada['ownerLN'] + " (" + self.sim_seleccionada['autor'] + ")")
        self.status.set_text(self.sim_seleccionada['status'])
        self.inputs.set_text(self.sim_seleccionada['inputs'])
        self.outputs.set_text(self.sim_seleccionada['outputs'])
        self.reports.set_text(self.sim_seleccionada['reports'])
        self.extern.set_text(self.sim_seleccionada['extern'])
        self.access.set_text(self.sim_seleccionada['access'])

        #simID=self.sim_seleccionada['id']
        # Simulacion=self.DB.getDetails(simID)
        self.detailsFrame.set_position(100)
        i=1
        while i<=self.SimulacionTabs.get_n_pages()-1:
            self.SimulacionTabs.remove_page(i)
        self.SimulacionTabs.show()
        self.sim_activada=self.sim_seleccionada
        
    def on_itemSeleccionado_changed(self,selection):
        treestore, path = selection.get_selected_rows()
        if (len(path)>0):
            self.items_seleccionados.clear()
            for item in path:
                self.items_seleccionados.append(self.item2Dict(treestore[item]))
        
    def on_simSeleccionada_changed(self,selection):
        treestore, path = selection.get_selected_rows()
        if (len(path)>0):
            self.sim_seleccionada=self.sim2Dict(treestore[path])
        
    def item2Dict(self,row):
        # Valor text en Gtk.CellRendererText dentro de Gtk.TreViewColumn (Arbol)
        # Los que no estan, siguen los ultimos en el orden del TreeStore (projectTree) 
        dict={}
        dict["name"]=row[0]
        dict["nsims"]=row[1]
        dict["tipo"]=row[2]
        dict["datos"]=row[3]
        dict["path"]=row.path
        return dict

    def sim2Dict(self,row):
        # Valor text en Gtk.CellRendererText dentro de Gtk.TreViewColumn (treesims)
        # Los que no estan, siguen los ultimos en el orden del TreeStore (listasims) 
        dict={}
        dict["id"]=row[0]
        dict["name"]=row[1]
        dict["project"]=row[2]
        dict["disciplina"]=row[3]
        dict["subdisciplina"]=row[4]
        dict["loadcase"]=row[5]
        dict["reference"]=row[6]
        dict["variant"]=row[7]
        dict["autor"]=row[8]
        dict["date"]=row[9]
        dict["status"]=row[10]
        dict["inputs"]=row[11]
        dict["outputs"]=row[12]
        dict["reports"]=row[13]
        dict["ownerLN"]=row[14]
        dict["extern"]=row[15]
        dict["access"]=row[16]
        return dict

    def dict2List(self,dict):
        list=[]
        for elem in dict:
            list.append(dict[elem])
        return list

    def populateFileSystemTreeStore(self,treeStore, files, parent=None):
        itemCounter = 0
        # iterate over the items in the path
        for item in files:
            # Get the absolute path of the item
            itemPath = files[item]['path']
            # Determine if the item is a folder
            itemIsFolder = files[item]['isFolder']
            # Generate an icon from the default icon theme
            folder=int(itemIsFolder)
            #https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html
            if folder:
                itemIcon = Gtk.IconTheme.get_default().load_icon("folder", 22, 0)
            else:    
                itemIcon = Gtk.IconTheme.get_default().load_icon("text-x-generic", 22, 0)
             # add dummy if current item was a folder
            if folder:
                # Append the item to the TreeStore
                currentIter = treeStore.append(parent,[item, itemIcon, itemPath,folder,False,True])
           
                #filesfolder=self.DB.getFiles(self.sim_seleccionada['id'], itemFullname)
                #self.populateFileSystemTreeStore(treeStore, filesfolder, currentIter)
                self.populateFileSystemTreeStore(treeStore, files[item]['folder'], currentIter)
                    #currentIter = treeStore.append(currentIter, [None, None, None])
            else:
                currentIter = treeStore.append(parent,[item, itemIcon, itemPath,folder,False,False])

            #increment the item counter
            itemCounter += 1
        # add the dummy node back if nothing was inserted before
        #if itemCounter < 1: treeStore.append(parent, [None, None, None,None,None])

    def selectSubTree (self, row):
        activation=row[4]
        treepath=row.path
        treeiter=self.fileSystemTreeStore.get_iter(treepath)
        if self.fileSystemTreeStore.iter_has_child(treeiter)==True:
            treepath.down()
            next=1
            while next != None:
                subtreeiter=self.fileSystemTreeStore.get_iter(treepath)
                subrow=self.fileSystemTreeStore[subtreeiter]
                filename=subrow[0]
                if subrow[3]==True: # is folder
                    if self.selected_files.get(filename) != None:
                        del self.selected_files[filename]
                    subrow[4]=activation
                    self.selectSubTree(subrow)
                next=subrow.next
                if next != None:
                    treepath.next()

    def unselectBrothers (self, row):
        treepath=row.path
        next=row.next
        # Next Brothers
        while next != None:
            treepath.next()
            brotheriter=self.fileSystemTreeStore.get_iter(treepath)
            brotherrow=self.fileSystemTreeStore[brotheriter]
            self.unselectTree(brotherrow)
            next=brotherrow.next
        # Previous Brothers
        prev=row.previous
        while prev != None:
            treepath.prev()
            brotheriter=self.fileSystemTreeStore.get_iter(treepath)
            brotherrow=self.fileSystemTreeStore[brotheriter]
            self.unselectTree(brotherrow)
            prev=brotherrow.previous

    def selectBrothers (self, row):
        treepath=row.path
        next=row.next
        # Next Brothers
        while next != None:
            treepath.next()
            brotheriter=self.fileSystemTreeStore.get_iter(treepath)
            brotherrow=self.fileSystemTreeStore[brotheriter]
            filename=brotherrow[0]
            activation=brotherrow[4]
            path=brotherrow[2]
            if brotherrow[3]==True: # is folder
                if activation == True:
                    self.selected_files[filename]=path
            next=brotherrow.next
        # Previous Brothers
        prev=row.previous
        while prev != None:
            treepath.prev()
            brotheriter=self.fileSystemTreeStore.get_iter(treepath)
            brotherrow=self.fileSystemTreeStore[brotheriter]
            filename=brotherrow[0]
            activation=brotherrow[4]
            path=brotherrow[2]
            if brotherrow[3]==True: # is folder
                if activation == True:
                    self.selected_files[filename]=path
            prev=brotherrow.previous

    def unselectFather (self, row):
        # get father
        activation=row[4]
        # if is selected -> unselect father
        if activation==True:
            row[4]=False
            filename=row[0]
            # delete row
            del self.selected_files[filename]
            if row.parent != None:
                self.unselectFather(row.parent)

    def unselectTree (self, row):
        # get father
        activation=row[4]
        # if is selected -> unselect father
        if activation==True:
            row[4]=False
            filename=row[0]
            # delete row
            if self.selected_files.get(filename) != None:
                del self.selected_files[filename]
        treepath=row.path
        treeiter=self.fileSystemTreeStore.get_iter(treepath)
        if self.fileSystemTreeStore.iter_has_child(treeiter)==True:
            treepath.down()
            treeiter=self.fileSystemTreeStore.get_iter(treepath)
            childrow=self.fileSystemTreeStore[treeiter]
            self.unselectTree(childrow)
            self.unselectBrothers(childrow)

                   
    def on_selected_folder(self,cell,treepath): 
        filename = self.fileSystemTreeStore[treepath][0]
        path = self.fileSystemTreeStore[treepath][2]
        isfolder = self.fileSystemTreeStore[treepath][3]
        activated = self.fileSystemTreeStore[treepath][4]
        self.fileSystemTreeStore[treepath][4] = not activated
        if not activated == True:
            self.selected_files[filename]=path
        else:
            if self.selected_files.get(filename) != None:
                del self.selected_files[filename]  
            else: 
                # Habia sido seleccionado el padre
                # borrar padre de la lista e insertar hijos sueltos
                treeiter=self.fileSystemTreeStore.get_iter_from_string(treepath)
                row=self.fileSystemTreeStore[treeiter]
                if row.parent != None:
                    self.unselectFather(row.parent)
                    # add all selected brothers to selected_files
                    self.selectBrothers(row)
        if isfolder == True:
            treeiter=self.fileSystemTreeStore.get_iter_from_string(treepath)
            row=self.fileSystemTreeStore[treeiter]
            self.selectSubTree(row)   
        if len(self.selected_files) >0:
            self.downloadButton.set_visible(True)
        else:
            self.downloadButton.set_visible(False)
        
        
    def on_download_clicked(self,button,data=None): 
        if not self.selectDirWindow.is_active(): 
            response = self.selectDirWindow.run()
            if not response == Gtk.ResponseType.ACCEPT:
                self.selectDirWindow.hide()
                return
        dir = self.selectDirWindow.get_file()
        dirdest=dir.get_path()

        self.Sim = Simulacion()
        error=self.Sim.downloadFiles(self.sim_activada,self.User, self.DB, dirdest,self.selected_files,self.logger)
        if error == "OK":
            self.show_message(self.selectDirWindow, 'dialog-information', "Simulation downloaded OK", "Download Simulation")
        else:
            self.show_message(self.selectDirWindow, 'dialog-error', "Simulation not downloaded: " + error, "Download Simulation")
        self.selectDirWindow.hide()
        
        
    def on_files_clicked(self,button,data=None): 
        if self.SimulacionTabs.get_n_pages()>1:
            i=1
            while i<=self.SimulacionTabs.get_n_pages()-1:
                page=self.SimulacionTabs.get_nth_page(i)
                if self.SimulacionTabs.get_tab_label_text(page)=='Files':
                    self.SimulacionTabs.set_current_page(i)
                    return
                i+=1
        
        files=self.DB.getFiles(self.sim_activada['id'])
        

        # initialize the filesystem treestore
        self.fileSystemTreeStore = self.MainGlade.get_object("fileSystemTreeStore")
        # populate the tree store
        self.fileSystemTreeStore.clear();
        # Get the absolute path of the item
        itemFullname = ""
        # Determine if the item is a folder
        itemIsFolder = True
        # Generate an icon from the default icon theme
        itemIcon = Gtk.IconTheme.get_default().load_icon("folder", 22, 0)
        # Append the item to the TreeStore
        name=self.sim_activada['name']
        currentIter = self.fileSystemTreeStore.append(None,[name, itemIcon, itemFullname,int(itemIsFolder),False,True])
        self.populateFileSystemTreeStore(self.fileSystemTreeStore, files, currentIter)

       
        page=self.MainGlade.get_object("pageTreeView") 
        tab_label = Gtk.Label()
        tab_label.set_text('Files')
        page.show()
        self.SimulacionTabs.append_page(page,tab_label)
        self.SimulacionTabs.set_current_page(-1)

    def on_switch_current_page(self,Notebook,Scrolled,page): 
        if page==1: # Files Page
            if len(self.selected_files) >0:
                self.downloadButton.set_visible(True)
            else:
                self.downloadButton.set_visible(False)
        else:
            self.downloadButton.set_visible(False)
                      
    # Signals comunes
    def gtk_main_quit(self, widget, data=None):
        Gtk.main_quit()
        return False

    def gtk_UserProfile_show (self,UserProfileWin):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        self.iduserLabel = self.MainGlade.get_object("iduserProfile")
        if (self.iduserLabel.get_text()==''):
            self.useridLabel = self.MainGlade.get_object("useridProfile")
            self.useridLabel.set_text(self.User.username.upper())
            self.iduserLabel.set_text(self.User.Profile['id'])
            self.nameLabel = self.MainGlade.get_object("nameProfile")
            self.nameLabel.set_text(self.User.Profile['longname'])
            self.departmentLabel = self.MainGlade.get_object("departmentProfile")
            self.departmentLabel.set_text(self.User.Profile['department'])
            self.correoLabel = self.MainGlade.get_object("emailProfile")
            self.correoLabel.set_text(self.User.Profile['correo'])
            
            # Roles
            self.listaRolesStore.clear()
            for role in self.User.Profile['roles']:
                listd=self.dict2List(self.User.Profile['roles'][role])
                self.listaRolesStore.append(listd)
        UserProfileWin.show_all()
        
    def gtk_RightsWindow_show (self,RightsWindow):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        self.e0r1_own = self.MainGlade.get_object('e0r1-own')
        if (self.e0r1_own.get_text()==''):
            # Etiquetas Roles
            self.role1_own = self.MainGlade.get_object('role1-own')
            self.role2_own = self.MainGlade.get_object('role2-own')
            self.role3_own = self.MainGlade.get_object('role3-own')
            self.role4_own = self.MainGlade.get_object('role4-own')
            self.role1_own.set_text(self.DB.Roles.get('1'))
            self.role2_own.set_text(self.DB.Roles.get('2'))
            self.role3_own.set_text(self.DB.Roles.get('3'))
            self.role4_own.set_text(self.DB.Roles.get('4'))
             
            self.role1 = self.MainGlade.get_object('role1')
            self.role2 = self.MainGlade.get_object('role2')
            self.role3 = self.MainGlade.get_object('role3')
            self.role4 = self.MainGlade.get_object('role4')
            self.role1.set_text(self.DB.Roles.get('1'))
            self.role2.set_text(self.DB.Roles.get('2'))
            self.role3.set_text(self.DB.Roles.get('3'))
            self.role4.set_text(self.DB.Roles.get('4'))
             
            # Etiquetas Access Levels
            self.estado0_own = self.MainGlade.get_object('estado0-own')
            self.estado1_own = self.MainGlade.get_object('estado1-own')
            self.estado2_own = self.MainGlade.get_object('estado2-own')
            self.estado0_own.set_text('0')
            self.estado1_own.set_text('1')
            self.estado2_own.set_text('2')
 
            self.estado0 = self.MainGlade.get_object('estado0')
            self.estado1 = self.MainGlade.get_object('estado1')
            self.estado2 = self.MainGlade.get_object('estado2')
            self.estado0.set_text('0')
            self.estado1.set_text('1')
            self.estado2.set_text('2')
                        
            # Permisos
            self.e0r1_own = self.MainGlade.get_object('e0r1-own')
            self.e1r1_own = self.MainGlade.get_object('e1r1-own')
            self.e2r1_own = self.MainGlade.get_object('e2r1-own')
            self.e0r2_own = self.MainGlade.get_object('e0r2-own')
            self.e1r2_own = self.MainGlade.get_object('e1r2-own')
            self.e2r2_own = self.MainGlade.get_object('e2r2-own')
            self.e0r3_own = self.MainGlade.get_object('e0r3-own')
            self.e1r3_own = self.MainGlade.get_object('e1r3-own')
            self.e2r3_own = self.MainGlade.get_object('e2r3-own')
            self.e0r4_own = self.MainGlade.get_object('e0r4-own')
            self.e1r4_own = self.MainGlade.get_object('e1r4-own')
            self.e2r4_own = self.MainGlade.get_object('e2r4-own')
            
            self.e0r1_own.set_text(self.DB.Rights.get('e0r1_T'))
            self.e1r1_own.set_text(self.DB.Rights.get('e1r1_T'))
            self.e2r1_own.set_text(self.DB.Rights.get('e2r1_T'))
            self.e0r2_own.set_text(self.DB.Rights.get('e0r2_T'))
            self.e1r2_own.set_text(self.DB.Rights.get('e1r2_T'))
            self.e2r2_own.set_text(self.DB.Rights.get('e2r2_T'))
            self.e0r3_own.set_text(self.DB.Rights.get('e0r3_T'))
            self.e1r3_own.set_text(self.DB.Rights.get('e1r3_T'))
            self.e2r3_own.set_text(self.DB.Rights.get('e2r3_T'))
            self.e0r4_own.set_text(self.DB.Rights.get('e0r4_T'))
            self.e1r4_own.set_text(self.DB.Rights.get('e1r4_T'))
            self.e2r4_own.set_text(self.DB.Rights.get('e2r4_T'))

            self.e0r1 = self.MainGlade.get_object('e0r1')
            self.e1r1 = self.MainGlade.get_object('e1r1')
            self.e2r1 = self.MainGlade.get_object('e2r1')
            self.e0r2 = self.MainGlade.get_object('e0r2')
            self.e1r2 = self.MainGlade.get_object('e1r2')
            self.e2r2 = self.MainGlade.get_object('e2r2')
            self.e0r3 = self.MainGlade.get_object('e0r3')
            self.e1r3 = self.MainGlade.get_object('e1r3')
            self.e2r3 = self.MainGlade.get_object('e2r3')
            self.e0r4 = self.MainGlade.get_object('e0r4')
            self.e1r4 = self.MainGlade.get_object('e1r4')
            self.e2r4 = self.MainGlade.get_object('e2r4')
            
            self.e0r1.set_text(self.DB.Rights.get('e0r1_F'))
            self.e1r1.set_text(self.DB.Rights.get('e1r1_F'))
            self.e2r1.set_text(self.DB.Rights.get('e2r1_F'))
            self.e0r2.set_text(self.DB.Rights.get('e0r2_F'))
            self.e1r2.set_text(self.DB.Rights.get('e1r2_F'))
            self.e2r2.set_text(self.DB.Rights.get('e2r2_F'))
            self.e0r3.set_text(self.DB.Rights.get('e0r3_F'))
            self.e1r3.set_text(self.DB.Rights.get('e1r3_F'))
            self.e2r3.set_text(self.DB.Rights.get('e2r3_F'))
            self.e0r4.set_text(self.DB.Rights.get('e0r4_F'))
            self.e1r4.set_text(self.DB.Rights.get('e1r4_F'))
            self.e2r4.set_text(self.DB.Rights.get('e2r4_F'))
            
            # Legend
            self.estado0_Legend = self.MainGlade.get_object('estado0_Legend')
            self.estado1_Legend = self.MainGlade.get_object('estado1_Legend')
            self.estado2_Legend = self.MainGlade.get_object('estado2_Legend')
            self.estado0_Legend.set_text('0')
            self.estado1_Legend.set_text('1')
            self.estado2_Legend.set_text('2')

            self.estado0_Description = self.MainGlade.get_object('estado0_Description')
            self.estado1_Description = self.MainGlade.get_object('estado1_Description')
            self.estado2_Description = self.MainGlade.get_object('estado2_Description')
            self.estado0_Description.set_text(self.DB.AccessLevels.get('0'))
            self.estado1_Description.set_text(self.DB.AccessLevels.get('1'))
            self.estado2_Description.set_text(self.DB.AccessLevels.get('2'))

        RightsWindow.show_all()
                    
    def gtk_widget_show(self, widget, data=None):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        widget.show_all()

    def gtk_widget_hide(self, widget, data=None):
        self.msg = ""
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        widget.hide()

        
    def gtk_NewSimulation(self,widget,data=None):
        # Llamada a nueva simulacion con parametros
        # 
#        response=Gtk.ResponseType.REJECT
        if not os.path.exists(self.User.storageWS):
            self.show_message(self.selectFileWindow,"dialog-error","STO " + self.User.storageWS +" no es accesible","Error nueva Simulacion")
            return

        if not self.selectFileWindow.is_active(): 
            response = self.selectFileWindow.run()
            if not response == Gtk.ResponseType.ACCEPT:
                self.selectFileWindow.hide()
                return
        
        file = self.selectFileWindow.get_file()
        self.Sim = Simulacion()
#        Sim.NewSimulation(self,file)
        self.Sim.Filename=file.get_path()
        self.Sim.Name=Path(self.Sim.Filename).stem
        if not self.Sim.isStructureOK():
            self.show_message(self.selectFileWindow,"dialog-error","Error en la estructura de la simulacion","Error de lectura")
            self.selectFileWindow.hide()
            return
        SimFile=SimFiles(self,"")
        file = SimFile.openfile(self,self.Sim.Filename,'r')
        error = self.Sim.readCabecera(file)
        self.selectFileWindow.hide()
        if not error:
            self.showCabecera()
        else:
            self.show_message(self.selectFileWindow,"dialog-error","Error de lectura","Error en la cabecera")

    def showCabecera(self):
        valid=self.DB.isValidSimulation(self.User, self.Sim)
        filename = self.SimGlade.get_object("filename") 
        filename.set_text(self.Sim.Filename)
        name = self.SimGlade.get_object("name") 
        name.set_text(self.Sim.Name)
#         for project_ref in self.User.Projects:
#             self.listaProyectos.append_text(project_ref[0])
#         self.listaProyectos.insert_text(0,self.Sim.Proyecto)
#         self.listaProyectos.set_active(0)
        proyecto = self.SimGlade.get_object("proyecto") 
        proyecto.set_text(self.Sim.Proyecto)
#         for tipo_ref in self.DB.Tipos:
#             self.listaTipos.append_text(tipo_ref[0])
        self.listaTipos.insert_text(0,self.Sim.Tipo)
        self.listaTipos.set_active(0)
#         for estado_ref in self.DB.Estados:
#             self.listaEstados.append_text(estado_ref[0])
        self.listaEstados.insert_text(0,self.Sim.Estado)
        self.listaEstados.set_active(0) 
#         for disciplina_ref in self.DB.Disciplinas:
#             self.listaDisciplina.append_text(disciplina_ref[0])
        self.listaDisciplina.insert_text(0,self.Sim.Disciplina)
        self.listaDisciplina.set_active(0)
#         # Dada la Disciplina activa, carga las subdisciplinas necesarias
#         for subdisciplina_ref in self.Sim.Subdisciplinas:
#             self.listaSubdisciplina.append_text(subdisciplina_ref)
        self.listaSubdisciplina.insert_text(0,self.Sim.Subdisciplina)
        self.listaSubdisciplina.set_active(0)
#         # Dada la SubDisciplina activa, carga los LoadCases necesarias
#         for loadcase_ref in self.Sim.LoadCases:
#             self.listaLoadCase.append_text(loadcase_ref[0])
        self.listaLoadCase.insert_text(0,self.Sim.LoadCase)
        self.listaLoadCase.set_active(0)
        subloadcase = self.SimGlade.get_object("subloadcase") 
        subloadcase.set_text(self.Sim.SubLoadcase)
        variant = self.SimGlade.get_object("variant") 
        variant.set_text(self.Sim.Variant)
        reference = self.SimGlade.get_object("reference") 
        reference.set_text(self.Sim.Reference)
        label = self.SimGlade.get_object("label") 
        label.set_text(self.Sim.Label)
        description = self.SimGlade.get_object("description") 
        descriptionBuff = description.get_buffer()
        descriptionBuff.set_text(self.Sim.Description)


        if not valid:
            self.buttonImport.set_sensitive(False)
            if self.Sim.error=='project':
                label=self.labelProject.get_text()
                self.labelProject.set_markup("<span foreground='red'><b>#ERROR# " + label + " </b></span>")
            if self.Sim.error=='tipo':
                label=self.labelTipo.get_text()
                self.labelTipo.set_markup("<span foreground='red'><b>#ERROR# " + label + " </b></span>")
            if self.Sim.error=='estado':
                label=self.labelEstado.get_text()
                self.labelEstado.set_markup("<span foreground='red'><b>#ERROR# " + label + " </b></span>")
            if self.Sim.error=='disciplina':
                label=self.labelDisciplina.get_text()
                self.labelDisciplina.set_markup("<span foreground='red'><b>#ERROR# " + label + " </b></span>")
            if self.Sim.error=='subdisciplina':
                label=self.labelSubdisciplina.get_text()
                self.labelSubdisciplina.set_markup("<span foreground='red'><b>#ERROR# " + label + " </b></span>")
            if self.Sim.error=='loadcase':
                label=self.labelLoadCase.get_text()
                self.labelLoadCase.set_markup("<span foreground='red'><b>#ERROR# " + label + " </b></span>")

        self.NewSimWindow.show()
    
    def gtk_overwrite_simulation(self,widget):
        self.YesCancelWindow.hide()
        result = self.Sim.importSimulation(self.DB,self.User,'Y',self.logger)
        if (result[0:2]=='OK'): self.show_message(self.NewSimWindow, 'dialog-information', result[3:], "Importacion Simulacion")
        self.importMessage.set_markup("<span foreground='red'><b></b></span>")
        self.NewSimWindow.hide()
    
    def gtk_nooverwrite_simulation (self,widget):
        self.YesCancelWindow.hide()
        self.importMessage.set_markup("<span foreground='red'><b></b></span>")
        self.NewSimWindow.hide()
                            
    def gtk_importSimulation(self,widget):
        self.importMessage.set_justify(Gtk.Justification.CENTER)
        self.importMessage.set_markup("<span foreground='red'><b>Importando simulacion </b></span>")
        GLib.timeout_add(1000, self.blink_label, self.importMessage)
        self.blink_label(self.importMessage)
        self.importMessage.show()
        result = self.Sim.importSimulation(self.DB,self.User,'N',self.logger)
        if (result[0:2]=='OK'): self.show_message(self.NewSimWindow, 'dialog-information', result[3:], "Importacion Simulacion")
        else: 
            if (result[0:27]=="ERROR: SIMULACION DUPLICADA"):
                # pregunta si sobreescribir
                self.questionLabel.set_markup("<span foreground='black'> " + result[6:] + " </span>")
                self.noteLabel1.set_markup("<span foreground='black'> Do you want to overwrite? </span>")
                self.noteLabel2.set_markup("<span foreground='black'><b> (NOTE: The existing simulation will be deleted) </b></span>")
                self.YesCancelWindow.show()
            else:
                self.show_message(self.NewSimWindow, 'dialog-error', result, "Importacion Simulacion")
        self.NewSimWindow.hide()
        
        
    def blink_label(self, label):
        if label.get_text()=="": label.set_markup("<span foreground='red'><b>Importando simulacion </b></span>")
        else: label.set_markup("")
        
    def week(self, i):
        switcher={
                'JAN':'01',
                'FEB':'02',
                'MAR':'03',
                'APR':'04',
                'MAY':'05',
                'JUN':'06',
                'JUL':'07',
                'AUG':'08',
                'SEP':'09',
                'OCT':'10',
                'NOV':'11',
                'DEC':'12'
        }
        return switcher.get(i,'00')
    
    def compareNumbers (self,model,row1,row2, user_data):
        sort_column, _ = model.get_sort_column_id()
        string1 = model.get_value(row1, sort_column)
        string2 = model.get_value(row2, sort_column)
        
        number1=int(string1)
        number2=int(string2)
        
        if number1 < number2:
            return 1
        elif number1 > number2:
            return -1
        else:
            return 0
       
        
    def compareDates(self,model, row1, row2, user_data):
        # dd-MON-yy
        sort_column, _ = model.get_sort_column_id()
        date1 = model.get_value(row1, sort_column)
        date2 = model.get_value(row2, sort_column)
        
        date1arr = date1.split("-") # date1arr[0]=dd date1arr[1]=MON date1arr[2]=yy
        date2arr = date2.split("-")
        
        #change month format
        date1arr[1]=self.week(date1arr[1])
        date2arr[1]=self.week(date2arr[1])
    
        if date1arr[2] < date2arr[2]: # year comparison
            return 1
        elif date1arr[2] > date2arr[2]:
            return -1
        else:  # same year
            if date1arr[1] < date2arr[1]: # month comparison
                return 1
            elif date1arr[1] > date2arr[1]:
                return -1
            else:  # same month
                if date1arr[0] < date2arr[0]: # day comparison
                    return 1
                elif date1arr[0] > date2arr[0]:
                    return -1
                else:  # same day
                    return 0

        
    def start_SSDM(self):
        # set username in Window
        self.username.set_text("Welcome: " + self.User.username)

        # Add logfile
        with open(self.logFilename, 'r') as f:
                data = f.read()
                self.log_buffer.set_text(data)  
                     
        # Cargar Proyectos Usuario
        # Adding info in the Project Combo
        for project_ref in self.User.Projects:
            cur_project=self.userProjectsCombo.append_text(project_ref[0])
            
        # Cargar Estados
        # Adding info in the Estado Combo
        for estado_ref in self.DB.Estados:
            cur_estado=self.EstadosCombo.append_text(estado_ref[0])

        #self.Paned.set_position(250)
        #self.Principal.set_position(300)
        self.main_window.show()
        self.SimulacionTabs.hide()
                
   # Inicializacion
    def __init__(self):
        self.scriptDir = os.path.dirname(os.path.realpath(__file__))
        self.tmpDir = self.scriptDir + "/../tmp/"
        self.gladeDir = self.scriptDir + "/../etc/"
        self.User = User(getpass.getuser())
        self.logFilename = self.tmpDir + Path(os.path.realpath(__file__)).stem + ".log"
        self.MainGlade = Gtk.Builder()
        self.SimGlade = Gtk.Builder()
        self.DownSimGlade = Gtk.Builder()
        self.logger = logging.getLogger('myapp')
        self.logger.setLevel(logging.INFO)
        
        # Anadimos ficheros Glade
        self.MainGlade.add_from_file(self.gladeDir + "xSDM.glade")
        self.SimGlade.add_from_file(self.gladeDir + "InputSim.glade")
        self.DownSimGlade.add_from_file(self.gladeDir + "DownloadSim.glade")
        
        # Definimos ventanas
        self.LoginWindow = self.MainGlade.get_object("LoginWindow")
        self.messageWin = self.MainGlade.get_object("Message")
        self.YesCancelWindow = self.MainGlade.get_object("YesCancelWin")
        self.main_window = self.MainGlade.get_object( "SSDM" )
        self.selectFileWindow=self.SimGlade.get_object("selectFileWin")
        self.NewSimWindow = self.SimGlade.get_object("NewSimWin")
        self.selectDirWindow=self.DownSimGlade.get_object("selectDirWindow")
        self.detailsFrame=self.MainGlade.get_object("detailsFrame")

        
        self.username = self.MainGlade.get_object("userid") 
        self.log_buffer = self.MainGlade.get_object( "Log" )
        self.messageIMG = self.MainGlade.get_object("messageIMG")
        self.messageLabel = self.MainGlade.get_object("messageLabel")
        self.questionLabel = self.MainGlade.get_object("questionLabel")
        self.noteLabel1 = self.MainGlade.get_object("noteLabel1")
        self.noteLabel2 = self.MainGlade.get_object("noteLabel2")
        #self.errorIMG = self.MainGlade.get_object("ErrorIMG")
        #self.OKIMG = self.MainGlade.get_object("OKIMG")
        self.importMessage = self.SimGlade.get_object("importMessage")
        
        # Proyectos
        self.project_store = self.MainGlade.get_object("projectTree") # Datos proyectos
        self.userProjectsCombo = self.MainGlade.get_object("UserProjects")
        self.EstadosCombo = self.MainGlade.get_object("Estados")
        self.project_tree = self.MainGlade.get_object("Arbol") # Vista proyectos
        self.Paned = self.MainGlade.get_object("Paned")
        self.Principal = self.MainGlade.get_object("Principal")
        self.items_seleccionados=[]
        self.sim_seleccionada=None
        self.sim_activada=None
        self.selected_project=""
        self.selected_estadoID=""
        self.seeOwnSims='False'
        self.listaRolesStore=self.MainGlade.get_object("userRolesstore")

      
        
        # ComboBoxText Simulacion nueva
        self.listaProyectos = self.SimGlade.get_object("proyecto")
        self.listaTipos = self.SimGlade.get_object("tipo")
        self.labelProject = self.SimGlade.get_object("proyectoLabel")
        self.labelTipo = self.SimGlade.get_object("tipoLabel")
        self.listaEstados = self.SimGlade.get_object("estado")
        self.listaDisciplina = self.SimGlade.get_object("disciplina")
        self.listaSubdisciplina = self.SimGlade.get_object("subdisciplina")
        self.labelSubdisciplina = self.SimGlade.get_object("subdisciplinaLabel")
        self.listaLoadCase = self.SimGlade.get_object("loadcase")
        self.labelLoadCase = self.SimGlade.get_object("loadcaseLabel")
        self.buttonImport = self.SimGlade.get_object("importButton")
        
        # Lista simulaciones
        self.listaSims=self.MainGlade.get_object("Simulaciones")
        self.listaSimsStore=self.MainGlade.get_object("listasims")
        self.listaSimsStore.set_sort_func(9, self.compareDates, None) # Date compare function SortColumnID
        self.listaSimsStore.set_sort_func(0, self.compareNumbers, None) # ID compare function SortColumnID

        # Datos mostrar Simulacion
        self.SimulacionTabs = self.MainGlade.get_object("Simulacion")
        self.project = self.MainGlade.get_object("proyecto")
        self.disciplina = self.MainGlade.get_object("disciplina")
        self.subdisciplina = self.MainGlade.get_object("subdisciplina")
        self.loadcase = self.MainGlade.get_object("loadcase")
        self.id = self.MainGlade.get_object("id")
        self.name = self.MainGlade.get_object("nameID")
        self.autor = self.MainGlade.get_object("autor")
        self.extern = self.MainGlade.get_object("extern")
        self.access = self.MainGlade.get_object("access")
        self.date = self.MainGlade.get_object("dateCreation")
        self.reference = self.MainGlade.get_object("reference")
        self.variant = self.MainGlade.get_object("variant")
        self.status = self.MainGlade.get_object("status")
        self.inputs = self.MainGlade.get_object("inputs")
        self.outputs = self.MainGlade.get_object("outputs")
        self.reports = self.MainGlade.get_object("reports")
        self.downloadButton = self.MainGlade.get_object("downloadButton")
        
        self.contextFrame = self.MainGlade.get_object("contextFrame")
        self.detailFrame = self.MainGlade.get_object("detailFrame")
        self.filesFrame = self.MainGlade.get_object("filesFrame")
        self.useridProfile = self.MainGlade.get_object("useridProfile")
        #colorbg= Gdk.RGBA()
        #Gdk.RGBA.parse(colorbg,"red")
        #gtk.gdk.Color(red=0, green=0, blue=0, pixel=0)
        #https://www.rapidtables.com/web/color/RGB_Color.html
        colorVerde=Gdk.color_parse('#F4FAEC')
        colorRojo=Gdk.color_parse('#FDE7E7')
        colorAzul=Gdk.color_parse('#EBFFFF')
        self.contextFrame.modify_bg(Gtk.StateFlags.NORMAL,colorVerde)
        self.detailFrame.modify_bg(Gtk.StateFlags.NORMAL,colorRojo)
        self.filesFrame.modify_bg(Gtk.StateFlags.NORMAL,colorAzul)
        self.useridProfile.modify_bg(Gtk.StateFlags.NORMAL,colorRojo)

        # Actions files
        self.selected_files={}

               
        # Conectamos signals
        self.MainGlade.connect_signals(self)
        self.SimGlade.connect_signals(self)
        self.DownSimGlade.connect_signals(self)
        #self.LoginWindow.set_title("SEAT SDM Login")
        #self.LoginWindow.set_default_size(200, 400)
        #self.msg = "Inicio aplicacion"
        #self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        #Gtk.Application.__init__(self)


    # Programa principal
    def main(self,argv):
        # Config
        Globals.initialize(0)
        # Arguments
        try:
            #opts, args = getopt.getopt(argv,"hi:o:",["ifile=","ofile="])
            opts, args = getopt.getopt(argv,"hd")
        except getopt.GetoptError:
            print ("xSDM.py -d")
            sys.exit(2)
        for opt, arg in opts:
            if opt == '-h':
                print ("xSDM.py -d")
                sys.exit()
            #elif opt in ("-l", "--log"):
            elif opt in ("-d"):
                self.logger.setLevel(logging.DEBUG)
        
        # Log file        
        if not os.path.exists(self.tmpDir): 
            #self.msg = "El directorio %s ya existe" % self.tmpDir
            #self.logger.debug ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
        #else:
            try:
                os.mkdir(self.tmpDir)
            except OSError:
                print ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
                sys.exit(2)
            #else:
                #self.msg = "Se ha creado el directorio: %s " % self.tmpDir
                #self.logger.debug ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))
                
        # Inicio        
        hdlr = logging.FileHandler(self.logFilename)
        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        hdlr.setFormatter(formatter)
        self.logger.addHandler(hdlr) 
        
        self.msg = "Inicio aplicacion"
        self.logger.info ("File %s, in %s, line %s: %s" % (inspect.stack()[0][1],inspect.stack()[0][3],inspect.stack()[0][2],self.msg))

        self.LoginWindow.show()
        #result=self.Login()
        Gtk.main()


# Inicio Aplicacion  
if __name__=='__main__':
    app = xSSDM()
    app.main(sys.argv[1:])
    
